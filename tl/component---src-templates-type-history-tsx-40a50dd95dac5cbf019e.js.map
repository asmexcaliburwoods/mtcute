{"version":3,"sources":["webpack://tl-reference/./src/templates/type-history.tsx"],"names":["useStyles","makeStyles","theme","createStyles","description","marginBottom","spacing","fontSize","fakeStrikethrough","textDecoration","TypeHistoryPage","data","pageContext","pageClasses","usePageStyles","classes","obj","object","history","info","first","length","toc","id","title","name","forEach","item","push","in","layer","rev","fillDescriptionFromCurrent","it","arguments","arg","curr","find","i","content","className","heading0","component","Link","to","color","variant","website","date","type","map","s","undefined","action","JSON","parse","diff","subtypes","key","added","removed","hexConstructorId","returns","LinkToTl","stub","changed","modified","old","new","constructorId","union","toUpperCase","substr","href","commit","target","file"],"mappings":"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","file":"component---src-templates-type-history-tsx-40a50dd95dac5cbf019e.js","sourcesContent":["import {\n    Description,\n    ListItemTlLink,\n    ListItemTlObject,\n    Page,\n    Section,\n    usePageStyles,\n} from '../components/page'\nimport React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport { ExtendedTlObject } from '../types'\nimport {\n    Breadcrumbs,\n    createStyles,\n    Divider,\n    Link as MuiLink,\n    List,\n    makeStyles,\n    Typography,\n} from '@material-ui/core'\nimport { LinkToTl } from '../components/objects/link-to-tl'\nimport { TableOfContentsItem } from '../components/table-of-contents'\nimport { ObjectParameters } from '../components/objects/object-parameters'\nimport { hexConstructorId } from '../utils'\nimport { Helmet } from 'react-helmet'\n\ninterface GraphqlResult {\n    info: {\n        uid: string\n        type: string\n        name: string\n        history: {\n            action: 'added' | 'modified' | 'removed'\n            diff: string\n            in: {\n                date: string\n                layer: number\n                rev: number\n                commit: string\n                website: boolean\n                file: string\n            }\n        }[]\n    }\n    object: ExtendedTlObject\n}\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        description: {\n            marginBottom: theme.spacing(2),\n            fontSize: 16,\n        },\n        fakeStrikethrough: {\n            textDecoration: 'line-through',\n            '&:hover': {\n                textDecoration: 'none',\n            },\n        },\n    })\n)\n\nconst capitalize = (s: string) => s[0].toUpperCase() + s.substr(1)\n\nexport default function TypeHistoryPage({\n    data,\n    pageContext,\n}: {\n    data: GraphqlResult\n    pageContext: ExtendedTlObject // in fact not, but who cares\n}) {\n    const pageClasses = usePageStyles()\n    const classes = useStyles()\n\n    const obj = data.object ?? pageContext\n    const history = data.info.history\n    const first = history[history.length - 1]\n\n    const toc: TableOfContentsItem[] = [{ id: 'title', title: obj.name }]\n\n    history.forEach((item) =>\n        toc.push({\n            id: `layer${item.in.layer}${\n                item.in.rev ? `-rev${item.in.rev}` : ''\n            }`,\n            title: `Layer ${item.in.layer}${\n                item.in.rev ? ` rev. ${item.in.rev}` : ''\n            }`,\n        })\n    )\n\n    // documentation is not fetched for historical schemas (yet?)\n    const fillDescriptionFromCurrent = (it: ExtendedTlObject): void => {\n        if (!it.arguments || !obj.arguments) return\n\n        it.arguments.forEach((arg) => {\n            if (arg.description) return\n\n            const curr = obj.arguments.find((i) => i.name === arg.name)\n            if (curr) arg.description = curr.description\n        })\n    }\n\n    const HistoryItem = (\n        item: GraphqlResult['info']['history'][number]\n    ): JSX.Element => {\n        let content: JSX.Element | undefined = undefined\n\n        if (pageContext.type === 'union') {\n            if (item.action === 'added') {\n                content = (\n                    <>\n                        <Typography variant=\"h5\">Types</Typography>\n                        <List>\n                            {JSON.parse(item.diff).subtypes.map(\n                                (type: string) => (\n                                    <ListItemTlLink\n                                        key={type}\n                                        type=\"class\"\n                                        name={type}\n                                        history\n                                    />\n                                )\n                            )}\n                        </List>\n                    </>\n                )\n            } else if (item.action === 'modified') {\n                let added = undefined\n                let removed = undefined\n\n                const diff = JSON.parse(item.diff).subtypes\n\n                if (diff.added.length) {\n                    added = (\n                        <>\n                            <Typography variant=\"h5\">Added</Typography>\n                            <List>\n                                {diff.added.map((type: string) => (\n                                    <ListItemTlLink\n                                        key={type}\n                                        type=\"class\"\n                                        name={type}\n                                        history\n                                    />\n                                ))}\n                            </List>\n                        </>\n                    )\n                }\n\n                if (diff.removed.length) {\n                    removed = (\n                        <>\n                            <Typography variant=\"h5\">Removed</Typography>\n                            <List>\n                                {diff.removed.map((type: string) => (\n                                    <ListItemTlLink\n                                        key={type}\n                                        type=\"class\"\n                                        name={type}\n                                        history\n                                    />\n                                ))}\n                            </List>\n                        </>\n                    )\n                }\n\n                content = (\n                    <>\n                        {added}\n                        {removed}\n                    </>\n                )\n            }\n        } else {\n            if (item.action === 'added') {\n                const object = JSON.parse(item.diff)\n                fillDescriptionFromCurrent(object)\n\n                content = (\n                    <>\n                        <Typography className={classes.description}>\n                            Constructor ID: {hexConstructorId(object.id)}\n                            <br />\n                            {object.returns ? (\n                                <>Returns: {LinkToTl(object.returns, true)}</>\n                            ) : (\n                                <>Belongs to: {LinkToTl(object.type, true)}</>\n                            )}\n                        </Typography>\n                        <Typography variant=\"h5\">Parameters</Typography>\n                        <ObjectParameters obj={object} history />\n                    </>\n                )\n            } else if (item.action === 'modified') {\n                const stub: ExtendedTlObject = {\n                    arguments: [],\n                } as any\n\n                const diff = JSON.parse(item.diff)\n\n                if (diff.arguments) {\n                    diff.arguments.added.forEach((arg: any) =>\n                        stub.arguments.push({ ...arg, changed: 'added' })\n                    )\n                    diff.arguments.modified.forEach((arg: any) => {\n                        stub.arguments.push({\n                            ...arg.old,\n                            changed: 'modified',\n                            className: classes.fakeStrikethrough,\n                        })\n                        stub.arguments.push({ ...arg.new, changed: 'modified' })\n                    })\n                    diff.arguments.removed.forEach((arg: any) =>\n                        stub.arguments.push({ ...arg, changed: 'removed' })\n                    )\n                }\n                fillDescriptionFromCurrent(stub)\n\n                let constructorId = undefined\n                let returns = undefined\n                let union = undefined\n\n                if (diff.id) {\n                    constructorId = (\n                        <Typography>\n                            Constructor ID:{' '}\n                            <span className={classes.fakeStrikethrough}>\n                                {hexConstructorId(diff.id.old)}\n                            </span>{' '}\n                            → {hexConstructorId(diff.id.new)}\n                        </Typography>\n                    )\n                }\n\n                if (diff.returns) {\n                    returns = (\n                        <Typography>\n                            Returns:{' '}\n                            <span className={classes.fakeStrikethrough}>\n                                {LinkToTl(diff.returns.old, true)}\n                            </span>{' '}\n                            → {LinkToTl(diff.returns.new, true)}\n                        </Typography>\n                    )\n                }\n\n                if (diff.type) {\n                    union = (\n                        <Typography>\n                            Belongs to:{' '}\n                            <span className={classes.fakeStrikethrough}>\n                                {LinkToTl(diff.type.old, true)}\n                            </span>{' '}\n                            → {LinkToTl(diff.type.new, true)}\n                        </Typography>\n                    )\n                }\n\n                content = (\n                    <>\n                        <Typography className={classes.description}>\n                            {constructorId}\n                            {returns}\n                            {union}\n                        </Typography>\n                        <Typography variant=\"h5\">Parameters</Typography>\n                        {diff.arguments && (\n                            <ObjectParameters obj={stub} diff history />\n                        )}\n                    </>\n                )\n            }\n        }\n\n        return (\n            <>\n                <div className={pageClasses.heading0}>\n                    <Typography\n                        variant=\"h4\"\n                        id={`layer${item.in.layer}${\n                            item.in.rev ? `-rev${item.in.rev}` : ''\n                        }`}\n                    >\n                        {capitalize(item.action)} in Layer {item.in.layer}\n                        {item.in.rev > 0 && (\n                            <span className={pageClasses.rev}>\n                                {' '}\n                                rev. {item.in.rev}\n                            </span>\n                        )}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        on {item.in.website ? 'website' : item.in.date}\n                        {!item.in.website && (\n                            <>\n                                {' '}\n                                / commit{' '}\n                                <MuiLink\n                                    href={`https://github.com/telegramdesktop/tdesktop/commit/${item.in.commit}`}\n                                    target=\"_blank\"\n                                >\n                                    {item.in.commit.substr(0, 7)}\n                                </MuiLink>{' '}\n                                (\n                                <MuiLink\n                                    href={`https://github.com/telegramdesktop/tdesktop/blob/${item.in.commit}/${item.in.file}`}\n                                    target=\"_blank\"\n                                >\n                                    file\n                                </MuiLink>\n                                )\n                            </>\n                        )}\n                    </Typography>\n                </div>\n                {content}\n            </>\n        )\n    }\n\n    return (\n        <Page toc={toc}>\n            <Helmet>\n                <title>History of {obj.name}</title>\n                <meta\n                    name=\"description\"\n                    content={\n                        `${obj.name}, first introduced in layer ${first.in.layer}` +\n                        `, has had ${history.length - 1} changes over time`\n                    }\n                />\n            </Helmet>\n\n            <div className={pageClasses.heading0}>\n                <Breadcrumbs>\n                    <MuiLink component={Link} to={`/history`}>\n                        History\n                    </MuiLink>\n                    <Typography color=\"textPrimary\">Types</Typography>\n                    <Typography color=\"textPrimary\">{obj.name}</Typography>\n                </Breadcrumbs>\n                <Typography variant=\"h3\" id=\"title\">\n                    {obj.name}\n                </Typography>\n                <Typography variant=\"body2\">\n                    first introduced in layer {first.in.layer} on{' '}\n                    {first.in.website ? 'website' : first.in.date}\n                    {data.object && (\n                        <>\n                            {' '}\n                            /{' '}\n                            <MuiLink\n                                component={Link}\n                                to={`/${obj.type}/${obj.name}`}\n                            >\n                                current\n                            </MuiLink>\n                        </>\n                    )}\n                </Typography>\n            </div>\n            <Description\n                description={obj.description}\n                className={classes.description}\n            />\n            {history.map(HistoryItem)}\n        </Page>\n    )\n}\n\nexport const query = graphql`\n    query($uid: String!, $name: String!, $type: String!) {\n        info: typesJson(uid: { eq: $uid }) {\n            uid\n            type\n            name\n            history {\n                action\n                diff\n                in {\n                    date(formatString: \"DD-MM-YYYY\")\n                    layer\n                    rev\n                    commit\n                    file\n                    website\n                }\n            }\n        }\n\n        object: tlObject(\n            prefix: { eq: \"\" }\n            name: { eq: $name }\n            type: { eq: $type }\n        ) {\n            prefix\n            type\n            name\n            description\n            arguments {\n                name\n                description\n            }\n        }\n    }\n`\n"],"sourceRoot":""}