{"version":3,"sources":["webpack://tl-reference/./src/pages/index.tsx"],"names":["countMissingDescriptionArguments","item","eqNull","count","nodes","forEach","node","arguments","arg","description","totalCount","IndexPage","totalWith","totalWithout","total","data","classes","usePageStyles","argWithoutDesc","argWithDesc","toc","id","title","className","heading1","variant","currentTlSchema","layer","paragraph","href","heading","component","methods","unions","mtClasses","mtMethods","mtUnions","clsWithDesc","clsWithoutDesc","Math","round","Link","to","historySchemas","historyTypes"],"mappings":"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","file":"component---src-pages-index-tsx-441bb9fbea40cf1ba50a.js","sourcesContent":["import React from 'react'\nimport { Link as MuiLink, Typography } from '@material-ui/core'\nimport { Page, usePageStyles } from '../components/page'\nimport { graphql, Link } from 'gatsby'\n\ninterface Data {\n    mtClasses: { totalCount: number }\n    classes: { totalCount: number }\n    mtMethods: { totalCount: number }\n    methods: { totalCount: number }\n    mtUnions: { totalCount: number }\n    unions: { totalCount: number }\n\n    clsWithDesc: { totalCount: number }\n    clsWithoutDesc: { totalCount: number }\n    argWithDesc: {\n        totalCount: number\n        nodes: { arguments: { description: string | null }[] }[]\n    }\n    argWithoutDesc: {\n        totalCount: number\n        nodes: { arguments: { description: string | null }[] }[]\n    }\n\n    currentTlSchema: {\n        layer: string\n    }\n\n    historySchemas: { totalCount: number }\n    historyTypes: { totalCount: number }\n}\n\nfunction countMissingDescriptionArguments(\n    item: Data['argWithDesc'],\n    eqNull: boolean\n) {\n    let count = 0\n    item.nodes.forEach((node) =>\n        node.arguments?.forEach((arg) => {\n            if (eqNull ? arg.description === null : arg.description !== null)\n                count += 1\n        })\n    )\n    item.totalCount = count\n}\n\nexport default function IndexPage({ data }: { data: Data }) {\n    const classes = usePageStyles()\n\n    countMissingDescriptionArguments(data.argWithoutDesc, true)\n    countMissingDescriptionArguments(data.argWithDesc, false)\n\n    return (\n        <Page\n            toc={[\n                { id: 'tl-reference', title: 'TL Reference' },\n                { id: 'types', title: 'Types' },\n                { id: 'core-types', title: 'Core types' },\n                { id: 'statistics', title: 'Statistics' },\n            ]}\n        >\n            <div className={classes.heading1}>\n                <Typography variant=\"h3\" id=\"tl-reference\">\n                    TL Reference\n                </Typography>\n                <Typography variant=\"body2\">\n                    layer {data.currentTlSchema.layer}\n                </Typography>\n            </div>\n            <Typography variant=\"body1\" className={classes.paragraph}>\n                This web application allows easily browsing through myriads of\n                TL objects and reading through their documentation. Unlike{' '}\n                <MuiLink href=\"//core.telegram.org/schema\">\n                    official documentation\n                </MuiLink>\n                , this app has simpler structure, search and nice interface.\n            </Typography>\n            <Typography variant=\"body1\" className={classes.paragraph}>\n                Even though this reference is intended to be used with{' '}\n                <MuiLink href=\"//github.com/teidesu/mtcute\">MTCute</MuiLink>{' '}\n                library, the objects are common to any other MTProto library.\n                The key difference is that MTCute (and this reference) use{' '}\n                <code>camelCase</code> for arguments, while the original schema\n                and some other libraries use <code>snake_case</code>.\n            </Typography>\n            <Typography variant=\"h4\" id=\"types\" className={classes.heading}>\n                Types\n            </Typography>\n            <Typography variant=\"body1\" className={classes.paragraph}>\n                In TL, there are 3 main groups of types: <i>Classes</i>,{' '}\n                <i>Methods</i> and Unions (officially they are called{' '}\n                <i>constructors</i>, <i>methods</i> and <i>types</i>{' '}\n                respectively).\n            </Typography>\n            <Typography variant=\"body1\" className={classes.paragraph}>\n                <i>Classes</i> and <i>Methods</i> are simply typed objects, that\n                contain some data. The only difference is that Methods are used\n                in RPC calls (i.e. they are sent to the server), and Classes are\n                used inside methods, or sent by the server back (either as an\n                RPC result, or as an update).\n            </Typography>\n            <Typography variant=\"body1\" className={classes.paragraph}>\n                <i>Union</i> is a type that combines multiple <i>Classes</i> in\n                one type. In some languages, this can be represented as an\n                abstract class. <i>Unions</i> are sent by Telegram in response\n                to RPC results, as well as they are used as arguments for other{' '}\n                <i>Classes</i> or <i>Methods</i>.\n            </Typography>\n            <Typography variant=\"body1\" className={classes.paragraph}>\n                In TL, every single <i>Class</i> is a part of exactly one{' '}\n                <i>Union</i>, and every <i>Union</i> contains at least one{' '}\n                <i>Class</i>.\n            </Typography>\n            <Typography variant=\"body1\" className={classes.paragraph}>\n                In MTCute, all types are exposed as a namespace <code>tl</code>{' '}\n                of package <code>@mtcute/tl</code>. By design, we use immutable\n                plain objects with type discriminator to represent{' '}\n                <i>Classes</i> and <i>Methods</i>, and TypeScript unions to\n                represent <i>Unions</i>.<br />\n                To differentiate between different groups of types, we use\n                different naming for each of them:\n            </Typography>\n            <Typography\n                variant=\"body1\"\n                className={classes.paragraph}\n                component=\"ul\"\n            >\n                <li>\n                    <i>Classes</i> are prefixed with <code>Raw</code> (e.g.{' '}\n                    <code>tl.RawMessage</code>)\n                </li>\n                <li>\n                    Additionally, <i>Methods</i> are postfixed with{' '}\n                    <code>Request</code> and (e.g.{' '}\n                    <code>tl.RawGetMessageRequest</code>)\n                </li>\n                <li>\n                    Finally, <i>Unions</i> are simply prefixed with{' '}\n                    <code>Type</code> (e.g. <code>tl.TypeUser</code>)\n                </li>\n            </Typography>\n            <Typography\n                variant=\"h4\"\n                id=\"core-types\"\n                className={classes.heading}\n            >\n                Core types\n            </Typography>\n            <Typography variant=\"body1\" className={classes.paragraph}>\n                Core types are basic built-in types that are used in TL schema.\n                Quick reference:\n            </Typography>\n            <Typography\n                variant=\"body1\"\n                className={classes.paragraph}\n                component=\"ul\"\n            >\n                <li>\n                    <code>number</code>: 32-bit signed integer\n                </li>\n                <li>\n                    <code>Long</code>: 64-bit signed integer\n                </li>\n                <li>\n                    <code>Int128</code>: 128-bit signed integer (only used for\n                    MTProto)\n                </li>\n                <li>\n                    <code>Int256</code>: 256-bit signed integer (only used for\n                    MTProto)\n                </li>\n                <li>\n                    <code>Double</code>: 64-bit floating point value\n                </li>\n                <li>\n                    <code>string</code>: UTF-16 string (strings in JS are also\n                    UTF-16)\n                </li>\n                <li>\n                    <code>Buffer</code>: Byte array of a known size\n                </li>\n                <li>\n                    <code>boolean</code>: One-byte boolean value (true/false)\n                </li>\n                <li>\n                    <code>true</code>: Zero-size <code>true</code> value, used\n                    for TL flags\n                </li>\n                <li>\n                    <code>any</code>: Any other TL object (usually another\n                    method)\n                </li>\n                <li>\n                    <code>T[]</code>: Array of <code>T</code>\n                </li>\n                <li>\n                    <code>TlFlags</code>: 32-bit signed value representing\n                    object's TL flags\n                </li>\n            </Typography>\n            <Typography\n                variant=\"h4\"\n                className={classes.heading}\n                id=\"statistics\"\n            >\n                Statistics\n            </Typography>\n            <Typography\n                variant=\"body1\"\n                className={classes.paragraph}\n                component=\"ul\"\n            >\n                <li>\n                    Generated from layer <b>{data.currentTlSchema.layer}</b>{' '}\n                </li>\n                <li>\n                    Current schema contains{' '}\n                    <b>\n                        {data.methods.totalCount +\n                            data.classes.totalCount +\n                            data.unions.totalCount}\n                    </b>{' '}\n                    types (+{' '}\n                    <b>\n                        {data.mtClasses.totalCount +\n                            data.mtMethods.totalCount +\n                            data.mtUnions.totalCount}\n                    </b>{' '}\n                    for MTProto)\n                </li>\n                <li>\n                    Current schema contains <b>{data.classes.totalCount}</b>{' '}\n                    classes (+ <b>{data.mtClasses.totalCount}</b> for MTProto)\n                </li>\n                <li>\n                    Current schema contains <b>{data.methods.totalCount}</b>{' '}\n                    methods (+ <b>{data.mtMethods.totalCount}</b> for MTProto)\n                </li>\n                <li>\n                    Current schema contains <b>{data.unions.totalCount}</b>{' '}\n                    unions (+ <b>{data.mtUnions.totalCount}</b> for MTProto)\n                </li>\n                <li>\n                    Description coverage:{' '}\n                    {(function () {\n                        const totalWith =\n                            data.argWithDesc.totalCount +\n                            data.clsWithDesc.totalCount\n                        const totalWithout =\n                            data.argWithoutDesc.totalCount +\n                            data.clsWithoutDesc.totalCount\n                        const total = totalWith + totalWithout\n\n                        return (\n                            <>\n                                <b>\n                                    {Math.round((totalWith / total) * 10000) /\n                                        100}\n                                    %\n                                </b>{' '}\n                                (out of {total} items, {totalWithout}{' '}\n                                <MuiLink component={Link} to=\"/no-description\">\n                                    don't have description\n                                </MuiLink>{' '}\n                                - that is {data.clsWithoutDesc.totalCount} types\n                                and {data.argWithoutDesc.totalCount} arguments)\n                            </>\n                        )\n                    })()}\n                </li>\n                <li>\n                    History is available for{' '}\n                    <MuiLink component={Link} to=\"/history\">\n                        <b>{data.historySchemas.totalCount}</b> schemas\n                    </MuiLink>{' '}\n                    and <b>{data.historyTypes.totalCount}</b> types\n                </li>\n            </Typography>\n        </Page>\n    )\n}\n\nexport const query = graphql`\n    query {\n        mtClasses: allTlObject(\n            filter: { type: { eq: \"class\" }, prefix: { eq: \"mtproto/\" } }\n        ) {\n            totalCount\n        }\n        classes: allTlObject(\n            filter: { type: { eq: \"class\" }, prefix: { ne: \"mtproto/\" } }\n        ) {\n            totalCount\n        }\n        mtMethods: allTlObject(\n            filter: { type: { eq: \"method\" }, prefix: { eq: \"mtproto/\" } }\n        ) {\n            totalCount\n        }\n        methods: allTlObject(\n            filter: { type: { eq: \"method\" }, prefix: { ne: \"mtproto/\" } }\n        ) {\n            totalCount\n        }\n        mtUnions: allTlObject(\n            filter: { type: { eq: \"union\" }, prefix: { eq: \"mtproto/\" } }\n        ) {\n            totalCount\n        }\n        unions: allTlObject(\n            filter: { type: { eq: \"union\" }, prefix: { ne: \"mtproto/\" } }\n        ) {\n            totalCount\n        }\n\n        currentTlSchema {\n            layer\n        }\n\n        clsWithDesc: allTlObject(filter: { description: { ne: null } }) {\n            totalCount\n        }\n        clsWithoutDesc: allTlObject(filter: { description: { eq: null } }) {\n            totalCount\n        }\n        argWithDesc: allTlObject(\n            filter: { arguments: { elemMatch: { description: { ne: null } } } }\n        ) {\n            totalCount\n            nodes {\n                arguments {\n                    description\n                }\n            }\n        }\n        argWithoutDesc: allTlObject(\n            filter: { arguments: { elemMatch: { description: { eq: null } } } }\n        ) {\n            totalCount\n            nodes {\n                arguments {\n                    description\n                }\n            }\n        }\n\n        historySchemas: allHistoryJson {\n            totalCount\n        }\n\n        historyTypes: allTypesJson {\n            totalCount\n        }\n    }\n`\n"],"sourceRoot":""}