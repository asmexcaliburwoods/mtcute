(self.webpackChunktl_reference=self.webpackChunktl_reference||[]).push([[691],{5391:function(e,t,l){"use strict";l.r(t),l.d(t,{default:function(){return i}});var n=l(7294),a=l(453),r=l(4850),s=l(3552),o=l(5313);function c(e,t){var l=0;e.nodes.forEach((function(e){var n;return null===(n=e.arguments)||void 0===n?void 0:n.forEach((function(e){(t?null===e.description:null!==e.description)&&(l+=1)}))})),e.totalCount=l}function i(e){var t,l,i,u=e.data,m=(0,s.$O)();return c(u.argWithoutDesc,!0),c(u.argWithDesc,!1),n.createElement(s.T3,{toc:[{id:"tl-reference",title:"TL Reference"},{id:"types",title:"Types"},{id:"core-types",title:"Core types"},{id:"statistics",title:"Statistics"}]},n.createElement("div",{className:m.heading1},n.createElement(a.Z,{variant:"h3",id:"tl-reference"},"TL Reference"),n.createElement(a.Z,{variant:"body2"},"layer ",u.currentTlSchema.layer)),n.createElement(a.Z,{variant:"body1",className:m.paragraph},"This web application allows easily browsing through myriads of TL objects and reading through their documentation. Unlike"," ",n.createElement(r.Z,{href:"//core.telegram.org/schema"},"official documentation"),", this app has simpler structure, search and nice interface."),n.createElement(a.Z,{variant:"body1",className:m.paragraph},"Even though this reference is intended to be used with"," ",n.createElement(r.Z,{href:"//github.com/teidesu/mtcute"},"MTCute")," ","library, the objects are common to any other MTProto library. The key difference is that MTCute (and this reference) use"," ",n.createElement("code",null,"camelCase")," for arguments, while the original schema and some other libraries use ",n.createElement("code",null,"snake_case"),"."),n.createElement(a.Z,{variant:"h4",id:"types",className:m.heading},"Types"),n.createElement(a.Z,{variant:"body1",className:m.paragraph},"In TL, there are 3 main groups of types: ",n.createElement("i",null,"Classes"),","," ",n.createElement("i",null,"Methods")," and Unions (officially they are called"," ",n.createElement("i",null,"constructors"),", ",n.createElement("i",null,"methods")," and ",n.createElement("i",null,"types")," ","respectively)."),n.createElement(a.Z,{variant:"body1",className:m.paragraph},n.createElement("i",null,"Classes")," and ",n.createElement("i",null,"Methods")," are simply typed objects, that contain some data. The only difference is that Methods are used in RPC calls (i.e. they are sent to the server), and Classes are used inside methods, or sent by the server back (either as an RPC result, or as an update)."),n.createElement(a.Z,{variant:"body1",className:m.paragraph},n.createElement("i",null,"Union")," is a type that combines multiple ",n.createElement("i",null,"Classes")," in one type. In some languages, this can be represented as an abstract class. ",n.createElement("i",null,"Unions")," are sent by Telegram in response to RPC results, as well as they are used as arguments for other"," ",n.createElement("i",null,"Classes")," or ",n.createElement("i",null,"Methods"),"."),n.createElement(a.Z,{variant:"body1",className:m.paragraph},"In TL, every single ",n.createElement("i",null,"Class")," is a part of exactly one"," ",n.createElement("i",null,"Union"),", and every ",n.createElement("i",null,"Union")," contains at least one"," ",n.createElement("i",null,"Class"),"."),n.createElement(a.Z,{variant:"body1",className:m.paragraph},"In MTCute, all types are exposed as a namespace ",n.createElement("code",null,"tl")," ","of package ",n.createElement("code",null,"@mtcute/tl"),". By design, we use immutable plain objects with type discriminator to represent"," ",n.createElement("i",null,"Classes")," and ",n.createElement("i",null,"Methods"),", and TypeScript unions to represent ",n.createElement("i",null,"Unions"),".",n.createElement("br",null),"To differentiate between different groups of types, we use different naming for each of them:"),n.createElement(a.Z,{variant:"body1",className:m.paragraph,component:"ul"},n.createElement("li",null,n.createElement("i",null,"Classes")," are prefixed with ",n.createElement("code",null,"Raw")," (e.g."," ",n.createElement("code",null,"tl.RawMessage"),")"),n.createElement("li",null,"Additionally, ",n.createElement("i",null,"Methods")," are postfixed with"," ",n.createElement("code",null,"Request")," and (e.g."," ",n.createElement("code",null,"tl.RawGetMessageRequest"),")"),n.createElement("li",null,"Finally, ",n.createElement("i",null,"Unions")," are simply prefixed with"," ",n.createElement("code",null,"Type")," (e.g. ",n.createElement("code",null,"tl.TypeUser"),")")),n.createElement(a.Z,{variant:"h4",id:"core-types",className:m.heading},"Core types"),n.createElement(a.Z,{variant:"body1",className:m.paragraph},"Core types are basic built-in types that are used in TL schema. Quick reference:"),n.createElement(a.Z,{variant:"body1",className:m.paragraph,component:"ul"},n.createElement("li",null,n.createElement("code",null,"number"),": 32-bit signed integer"),n.createElement("li",null,n.createElement("code",null,"Long"),": 64-bit signed integer"),n.createElement("li",null,n.createElement("code",null,"Int128"),": 128-bit signed integer (only used for MTProto)"),n.createElement("li",null,n.createElement("code",null,"Int256"),": 256-bit signed integer (only used for MTProto)"),n.createElement("li",null,n.createElement("code",null,"Double"),": 64-bit floating point value"),n.createElement("li",null,n.createElement("code",null,"string"),": UTF-16 string (strings in JS are also UTF-16)"),n.createElement("li",null,n.createElement("code",null,"Buffer"),": Byte array of a known size"),n.createElement("li",null,n.createElement("code",null,"boolean"),": One-byte boolean value (true/false)"),n.createElement("li",null,n.createElement("code",null,"true"),": Zero-size ",n.createElement("code",null,"true")," value, used for TL flags"),n.createElement("li",null,n.createElement("code",null,"any"),": Any other TL object (usually another method)"),n.createElement("li",null,n.createElement("code",null,"T[]"),": Array of ",n.createElement("code",null,"T")),n.createElement("li",null,n.createElement("code",null,"TlFlags"),": 32-bit signed value representing object's TL flags")),n.createElement(a.Z,{variant:"h4",className:m.heading,id:"statistics"},"Statistics"),n.createElement(a.Z,{variant:"body1",className:m.paragraph,component:"ul"},n.createElement("li",null,"Generated from layer ",n.createElement("b",null,u.currentTlSchema.layer)," "),n.createElement("li",null,"Current schema contains"," ",n.createElement("b",null,u.methods.totalCount+u.classes.totalCount+u.unions.totalCount)," ","types (+"," ",n.createElement("b",null,u.mtClasses.totalCount+u.mtMethods.totalCount+u.mtUnions.totalCount)," ","for MTProto)"),n.createElement("li",null,"Current schema contains ",n.createElement("b",null,u.classes.totalCount)," ","classes (+ ",n.createElement("b",null,u.mtClasses.totalCount)," for MTProto)"),n.createElement("li",null,"Current schema contains ",n.createElement("b",null,u.methods.totalCount)," ","methods (+ ",n.createElement("b",null,u.mtMethods.totalCount)," for MTProto)"),n.createElement("li",null,"Current schema contains ",n.createElement("b",null,u.unions.totalCount)," ","unions (+ ",n.createElement("b",null,u.mtUnions.totalCount)," for MTProto)"),n.createElement("li",null,"Description coverage:"," ",(t=u.argWithDesc.totalCount+u.clsWithDesc.totalCount,l=u.argWithoutDesc.totalCount+u.clsWithoutDesc.totalCount,i=t+l,n.createElement(n.Fragment,null,n.createElement("b",null,Math.round(t/i*1e4)/100,"%")," ","(out of ",i," items, ",l," ",n.createElement(r.Z,{component:o.rU,to:"/no-description"},"don't have description")," ","- that is ",u.clsWithoutDesc.totalCount," types and ",u.argWithoutDesc.totalCount," arguments)"))),n.createElement("li",null,"History is available for"," ",n.createElement(r.Z,{component:o.rU,to:"/history"},n.createElement("b",null,u.historySchemas.totalCount)," schemas")," ","and ",n.createElement("b",null,u.historyTypes.totalCount)," types")))}}}]);
//# sourceMappingURL=component---src-pages-index-tsx-441bb9fbea40cf1ba50a.js.map