{"version":3,"sources":["webpack://tl-reference/./src/hooks/use-code-area.tsx","webpack://tl-reference/./src/components/objects/object-ts-code.tsx","webpack://tl-reference/./src/templates/tl-object.tsx"],"names":["useStyles","makeStyles","theme","createStyles","code","fontFamily","background","color","fontSize","borderRadius","overflowX","padding","textDecoration","keyword","fontStyle","identifier","property","comment","string","useCodeArea","classes","s","className","typeName","substr","length","ret","split","forEach","it","idx","push","ObjectTsCode","obj","children","entities","type","ts","ns","namespace","prefix","name","arguments","arg","optional","predicate","description","marginBottom","spacing","table","TlObject","data","pageClasses","usePageStyles","self","toc","useMemo","id","title","throws","useToc","Helmet","content","descriptionExcerpt","heading0","Breadcrumbs","component","Link","to","Typography","variant","tlId","LinkToTl","parent","href","nodes","usageTypes","usageMethods","returns","available","subtypes","Table","TableHead","TableRow","TableCell","TableBody","map","err","key"],"mappings":"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","file":"component---src-templates-tl-object-tsx-c395b4a7ece9ba9e02ce.js","sourcesContent":["import { createStyles, makeStyles } from '@material-ui/core'\nimport React, { ReactNode } from 'react'\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        // theme ported from one dark\n        code: {\n            fontFamily: 'Iosevka SS05, Fira Mono, Consolas, monospace',\n            background: '#282c34',\n            color: '#bbbbbb',\n            fontSize: 16,\n            borderRadius: 4,\n            overflowX: 'auto',\n            padding: 8,\n\n            '& a': {\n                textDecoration: 'none'\n            }\n        },\n        keyword: {\n            fontStyle: 'italic',\n            color: '#c678dd',\n        },\n        identifier: {\n            color: '#e5c07b',\n        },\n        property: {\n            color: '#e06c75',\n        },\n        comment: {\n            color: '#5c6370',\n        },\n        string: {\n            color: '#98c379',\n        },\n    })\n)\n\nexport function useCodeArea() {\n    const classes = useStyles()\n\n    const keyword = (s: ReactNode) => (\n        <span className={classes.keyword}>{s}</span>\n    )\n\n    const identifier = (s: ReactNode) => (\n        <span className={classes.identifier}>{s}</span>\n    )\n\n    const property = (s: ReactNode) => (\n        <span className={classes.property}>{s}</span>\n    )\n\n    const comment = (s: ReactNode) => (\n        <span className={classes.comment}>{s}</span>\n    )\n\n    const string = (s: ReactNode) => <span className={classes.string}>{s}</span>\n\n    const typeName = (s: string): ReactNode => {\n        if (\n            s === 'string' ||\n            s === 'number' ||\n            s === 'boolean' ||\n            s === 'any' ||\n            s === 'true'\n        ) {\n            return keyword(s)\n        }\n\n        if (s.substr(s.length - 2) === '[]')\n            return [typeName(s.substr(0, s.length - 2)), '[]']\n\n        const ret: ReactNode[] = []\n        s.split('.').forEach((it, idx) => {\n            if (idx !== 0) ret.push('.')\n            ret.push(identifier(it))\n        })\n        return ret\n    }\n\n    const code = (s: ReactNode) => <pre className={classes.code}>{s}</pre>\n\n    return {\n        keyword,\n        identifier,\n        property,\n        comment,\n        string,\n        typeName,\n        code,\n    }\n}\n","import { ExtendedTlObject } from '../../types'\nimport React, { ReactNode } from 'react'\nimport { useCodeArea } from '../../hooks/use-code-area'\n\nexport function ObjectTsCode({\n    obj,\n    children,\n}: {\n    obj: ExtendedTlObject\n    children?: ExtendedTlObject[]\n}): JSX.Element {\n    const code = useCodeArea()\n\n    const entities: ReactNode[] = []\n    if (obj.type === 'union') {\n        entities.push(\n            code.keyword('export type'),\n            ' ',\n            code.identifier(obj.ts),\n            ' ='\n        )\n\n        children!.forEach((it) => {\n            const ns =\n                it.namespace === '$root'\n                    ? it.prefix === 'mtproto/'\n                        ? 'mtproto.'\n                        : ''\n                    : it.namespace + '.'\n\n            entities.push('\\n    | ', code.typeName(`tl.${ns}${it.ts}`))\n        })\n    } else {\n        entities.push(\n            code.keyword('export interface'),\n            ' ',\n            code.identifier(obj.ts),\n            ' {\\n    ',\n            code.property('_'),\n            ': ',\n            code.string(\n                `'${obj.prefix === 'mtproto/' ? 'mt_' : ''}${obj.name}'`\n            )\n        )\n\n        obj.arguments.forEach((arg) => {\n            if (arg.type === '$FlagsBitField') {\n                return entities.push(\n                    code.comment(\n                        `\\n    // ${arg.name}: TlFlags // handled automatically`\n                    )\n                )\n            }\n\n            entities.push(\n                '\\n    ',\n                code.property(arg.name),\n                `${arg.optional ? '?' : ''}: `,\n                code.typeName(arg.ts)\n            )\n\n            if (arg.predicate) {\n                entities.push(\n                    ' ',\n                    code.comment('// present if ' + arg.predicate)\n                )\n            }\n        })\n\n        entities.push('\\n}')\n    }\n\n    return code.code(entities)\n\n    // const typeName = (s: string): string => {\n    //     if (\n    //         s === 'string' ||\n    //         s === 'number' ||\n    //         s === 'boolean' ||\n    //         s === 'true'\n    //     ) {\n    //         return keyword(s)\n    //     }\n    //\n    //     if (s.substr(s.length - 2) === '[]')\n    //         return typeName(s.substr(0, s.length - 2)) + '[]'\n    //\n    //     return s.split('.').map(identifier).join('.')\n    // }\n    //\n    // let html\n    // if (obj.type === 'union') {\n    //     html = `${keyword('export type')} ${identifier(obj.ts)} =`\n    //     html += children!\n    //         .map((it) => {\n    //             const ns =\n    //                 it.namespace === '$root'\n    //                     ? it.prefix === 'mtproto/'\n    //                         ? 'mtproto.'\n    //                         : ''\n    //                     : it.namespace + '.'\n    //\n    //             return `\\n    | ${typeName(`tl.${ns}${it.ts}`)}`\n    //         })\n    //         .join('')\n    // } else {\n    //     html = `${keyword('export interface')} ${identifier(obj.ts)} {`\n    //     html += `\\n    ${property('_')}: `\n    //     html += _string(\n    //         `'${obj.prefix === 'mtproto/' ? 'mt_' : ''}${obj.name}'`\n    //     )\n    //     html += obj.arguments\n    //         .map((arg) => {\n    //             if (arg.type === '$FlagsBitField') {\n    //                 return comment(\n    //                     `\\n    // ${arg.name}: TlFlags // handled automatically`\n    //                 )\n    //             }\n    //\n    //             const opt = arg.optional ? '?' : ''\n    //             const comm = arg.predicate\n    //                 ? ' ' + comment('// present if ' + arg.predicate)\n    //                 : ''\n    //\n    //             const typ = typeName(arg.ts)\n    //             return `\\n    ${property(arg.name)}${opt}: ${typ}${comm}`\n    //         })\n    //         .join('')\n    //     html += '\\n}'\n    // }\n    //\n    // return (\n    //     <pre\n    //         className={classes.code}\n    //         dangerouslySetInnerHTML={{ __html: html }}\n    //     />\n    // )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport { ExtendedTlObject } from '../types'\nimport {\n    Description,\n    Page,\n    Section,\n    SectionWithList,\n    usePageStyles,\n} from '../components/page'\nimport {\n    Breadcrumbs,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n} from '@material-ui/core'\nimport {\n    createStyles,\n    Link as MuiLink,\n    makeStyles,\n    Typography,\n} from '@material-ui/core'\nimport { Link } from 'gatsby'\nimport { LinkToTl } from '../components/objects/link-to-tl'\nimport { TableOfContentsItem } from '../components/table-of-contents'\nimport { Helmet } from 'react-helmet'\nimport { ObjectParameters } from '../components/objects/object-parameters'\nimport { ObjectTsCode } from '../components/objects/object-ts-code'\n\ninterface GraphqlResult {\n    self: ExtendedTlObject\n    parent: ExtendedTlObject\n    children: { nodes: ExtendedTlObject[] }\n    usageMethods: { nodes: ExtendedTlObject[] }\n    usageTypes: { nodes: ExtendedTlObject[] }\n}\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        description: {\n            marginBottom: theme.spacing(2),\n            fontSize: 16,\n        },\n        table: {\n            '& th, & td': {\n                fontSize: 15,\n            },\n        },\n    })\n)\n\nfunction useToc(obj: ExtendedTlObject): TableOfContentsItem[] {\n    return useMemo(() => {\n        const ret = [{ id: 'title', title: obj.prefix + obj.name }]\n\n        if (obj.type !== 'union') {\n            ret.push({ id: 'parameters', title: 'Parameters' })\n        } else {\n            ret.push({ id: 'subtypes', title: 'Subtypes' })\n            ret.push({ id: 'usage', title: 'Usage' })\n        }\n\n        if (obj.type === 'method' && obj.throws) {\n            ret.push({ id: 'throws', title: 'Throws' })\n        }\n\n        ret.push({ id: 'typescript', title: 'TypeScript' })\n\n        return ret\n    }, [obj])\n}\n\nexport default function TlObject({ data }: { data: GraphqlResult }) {\n    const pageClasses = usePageStyles()\n    const classes = useStyles()\n\n    const obj = data.self\n    const toc = useToc(obj)\n\n    return (\n        <Page toc={toc}>\n            <Helmet>\n                <title>\n                    {obj.prefix}\n                    {obj.name}\n                </title>\n                <meta\n                    name=\"description\"\n                    content={\n                        obj.descriptionExcerpt ||\n                        obj.prefix +\n                            obj.name +\n                            \" currently doesn't have a description.\"\n                    }\n                />\n            </Helmet>\n\n            <div className={pageClasses.heading0}>\n                <Breadcrumbs>\n                    <MuiLink\n                        component={Link}\n                        to={`/${obj.prefix}${\n                            obj.type === 'method' ? 'methods' : 'types'\n                        }`}\n                    >\n                        {obj.prefix}\n                        {obj.type === 'method' ? 'Methods' : 'Types'}\n                    </MuiLink>\n                    {obj.namespace !== '$root' && (\n                        <MuiLink\n                            component={Link}\n                            to={`/${obj.prefix}${\n                                obj.type === 'method' ? 'methods' : 'types'\n                            }/${obj.namespace}`}\n                        >\n                            {obj.prefix}\n                            {obj.namespace}\n                        </MuiLink>\n                    )}\n                    <Typography color=\"textPrimary\">{obj.name}</Typography>\n                </Breadcrumbs>\n                <Typography variant=\"h3\" id=\"title\">\n                    {obj.prefix}\n                    {obj.name}\n                </Typography>\n                <Typography variant=\"body2\">\n                    {obj.type === 'class' ? (\n                        <>\n                            constructor ID 0x{obj.tlId} / belongs to union{' '}\n                            {LinkToTl(data.parent)}\n                        </>\n                    ) : obj.type === 'union' ? (\n                        <>\n                            has{' '}\n                            <MuiLink href=\"#subtypes\">\n                                {data.children.nodes.length} sub-types\n                            </MuiLink>{' '}\n                            and{' '}\n                            <MuiLink href=\"#usage\">\n                                {data.usageTypes.nodes.length +\n                                    data.usageMethods.nodes.length}{' '}\n                                usages\n                            </MuiLink>\n                        </>\n                    ) : (\n                        obj.returns && (\n                            <>\n                                constructor ID 0x{obj.tlId} / returns{' '}\n                                {LinkToTl(obj.returns)}\n                                {obj.available &&\n                                    ' / available for ' +\n                                        (obj.available === 'both'\n                                            ? 'both users and bots'\n                                            : obj.available + 's only')}\n                            </>\n                        )\n                    )}\n                    {obj.prefix === '' && (\n                        <>\n                            {' / '}\n                            <MuiLink\n                                component={Link}\n                                to={`/history/${obj.type}/${obj.name}`}\n                            >\n                                history\n                            </MuiLink>\n                        </>\n                    )}\n                </Typography>\n            </div>\n            <Description\n                description={obj.description}\n                className={classes.description}\n            />\n            {obj.type !== 'union' && (\n                <Section id=\"parameters\" title=\"Parameters\">\n                    <ObjectParameters obj={obj} />\n                </Section>\n            )}\n            {obj.type === 'union' && (\n                <>\n                    <SectionWithList\n                        id=\"subtypes\"\n                        title=\"Subtypes\"\n                        nodes={data.children.nodes}\n                    >\n                        {obj.prefix}\n                        {obj.name} can be represented with{' '}\n                        {obj.subtypes.length > 1\n                            ? `one of ${obj.subtypes.length} classes`\n                            : 'only one class'}\n                        :\n                    </SectionWithList>\n\n                    <Section id=\"usage\" title=\"Usage\">\n                        {data.usageMethods.nodes.length > 0 && (\n                            <SectionWithList nodes={data.usageMethods.nodes}>\n                                {obj.prefix}\n                                {obj.name} is returned by{' '}\n                                {data.usageMethods.nodes.length > 1\n                                    ? `${data.usageMethods.nodes.length} methods`\n                                    : 'only one method'}\n                                :\n                            </SectionWithList>\n                        )}\n\n                        {data.usageTypes.nodes.length > 0 && (\n                            <SectionWithList nodes={data.usageTypes.nodes}>\n                                {obj.prefix}\n                                {obj.name} is used in{' '}\n                                {data.usageTypes.nodes.length > 1\n                                    ? `${data.usageTypes.nodes.length} types`\n                                    : 'only one type'}\n                                :\n                            </SectionWithList>\n                        )}\n\n                        {data.usageMethods.nodes.length === 0 &&\n                            data.usageTypes.nodes.length === 0 && (\n                                <Typography color=\"textSecondary\">\n                                    This union is never used :(\n                                </Typography>\n                            )}\n                    </Section>\n                </>\n            )}\n            {obj.throws && (\n                <Section id=\"throws\" title=\"Throws\">\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Code</TableCell>\n                                <TableCell>Name</TableCell>\n                                <TableCell>Description</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {obj.throws.map((err) => (\n                                <TableRow key={err.name}>\n                                    <TableCell>\n                                        <code>{err.code}</code>\n                                    </TableCell>\n                                    <TableCell>\n                                        <code>{err.name}</code>\n                                    </TableCell>\n                                    <Description\n                                        description={err.description}\n                                        component={TableCell}\n                                    />\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Section>\n            )}\n            <Section id=\"typescript\" title=\"TypeScript declaration\">\n                <ObjectTsCode obj={obj} children={data.children?.nodes} />\n            </Section>\n        </Page>\n    )\n}\n\nexport const query = graphql`\n    query(\n        $prefix: String!\n        $type: String!\n        $name: String!\n        $hasSubtypes: Boolean!\n        $subtypes: [String]\n    ) {\n        self: tlObject(\n            prefix: { eq: $prefix }\n            type: { eq: $type }\n            name: { eq: $name }\n        ) {\n            tlId\n            ts\n            prefix\n            type\n            name\n            description\n            descriptionExcerpt\n            namespace\n            returns\n            available\n            arguments {\n                name\n                ts\n                type\n                description\n                optional\n                predicate\n            }\n            subtypes\n            throws {\n                code\n                description\n                name\n            }\n        }\n        parent: tlObject(\n            prefix: { eq: $prefix }\n            type: { eq: \"union\" }\n            subtypes: { eq: $name }\n        ) {\n            prefix\n            name\n            type\n            description\n            subtypes\n        }\n        children: allTlObject(\n            filter: {\n                prefix: { eq: $prefix }\n                type: { eq: \"class\" }\n                name: { in: $subtypes }\n            }\n        ) @include(if: $hasSubtypes) {\n            nodes {\n                ts\n                id\n                namespace\n                prefix\n                name\n                type\n                description\n            }\n        }\n        usageMethods: allTlObject(\n            filter: {\n                prefix: { eq: $prefix }\n                type: { eq: \"method\" }\n                rawReturns: { eq: $name }\n            }\n        ) @include(if: $hasSubtypes) {\n            nodes {\n                id\n                prefix\n                type\n                name\n                description\n            }\n        }\n        usageTypes: allTlObject(\n            filter: {\n                prefix: { eq: $prefix }\n                arguments: { elemMatch: { rawType: { eq: $name } } }\n            }\n        ) {\n            nodes {\n                id\n                prefix\n                type\n                name\n                description\n            }\n        }\n    }\n`\n"],"sourceRoot":""}