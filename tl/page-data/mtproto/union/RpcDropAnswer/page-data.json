{"componentChunkName":"component---src-templates-tl-object-tsx","path":"/mtproto/union/RpcDropAnswer","result":{"data":{"self":{"tlId":null,"ts":"TypeRpcDropAnswer","prefix":"mtproto/","type":"union","name":"RpcDropAnswer","description":null,"descriptionExcerpt":null,"namespace":"$root","returns":null,"available":null,"arguments":null,"subtypes":["rpc_answer_unknown","rpc_answer_dropped_running","rpc_answer_dropped"],"throws":null},"parent":null,"children":{"nodes":[{"ts":"RawRpc_answer_unknown","id":"3c39bec7-a7e6-5d15-a31a-27445ec70e63","namespace":"$root","prefix":"mtproto/","name":"rpc_answer_unknown","type":"class","description":null},{"ts":"RawRpc_answer_dropped_running","id":"88dbc326-c5c3-563b-a297-8a6a0c10ffe2","namespace":"$root","prefix":"mtproto/","name":"rpc_answer_dropped_running","type":"class","description":"<div>Response was canceled while the RPC query was being processed (where the RPC query itself was still fully processed); in this case, the same rpc_answer_dropped_running is also returned in response to the original query, and both of these responses require an acknowledgment from the client.</div>\n"},{"ts":"RawRpc_answer_dropped","id":"36714686-88d5-516f-a471-5d44b2646404","namespace":"$root","prefix":"mtproto/","name":"rpc_answer_dropped","type":"class","description":"<div>The RPC response was removed from the serverâ€™s outgoing queue</div>\n"}]},"usageMethods":{"nodes":[{"id":"ddd09759-824c-5f08-84fd-0b8a1ff4d85c","prefix":"mtproto/","type":"method","name":"rpcDropAnswer","description":"<div>Cancellation of an RPC query. In certain situations, the client does not want to receive a response to an already transmitted RPC query, for example because the response turns out to be long and the client has decided to do without it because of insufficient link capacity. Simply interrupting the connection will not have any effect because the server would re-send the missing response at the first opportunity. Therefore, the client needs a way to cancel receipt of the RPC response message, actually acknowledging its receipt prior to it being in fact received, which will settle the server down and prevent it from re-sending the response. However, the client does not know the RPC response&#39;s message ID prior to receiving the response; the only thing it knows is the requesting message ID, i.e. the message ID of the relevant RPC query. Therefore, this special query is used</div>\n"}]},"usageTypes":{"nodes":[]}},"pageContext":{"prefix":"mtproto/","name":"RpcDropAnswer","type":"union","namespace":"$root","subtypes":["rpc_answer_unknown","rpc_answer_dropped_running","rpc_answer_dropped"],"hasSubtypes":true}},"staticQueryHashes":["3577901480"]}